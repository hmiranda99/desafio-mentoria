{
    "openapi": "3.0.0",
    "info": {
        "title": "Desafio backend",
        "description": "For this challenge, a scalable API was developed that aims to perform bank transfers between two types of users, ordinary users and shopkeepers.",
        "version": "3.0.0"
    },
    "paths": {
        "/api/transaction": {
            "post": {
                "tags": [
                    "Create Transaction"
                ],
                "summary": "Create a transaction",
                "description": "This endpoint creates a transaction.",
                "operationId": "66ba373f920b38b37274440e31b6f6ec",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/transaction_request"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Transaction created successfully."
                    },
                    "400": {
                        "description": "Insufficient balance."
                    },
                    "403": {
                        "description": "Seller entity users cannot transact, only receive."
                    },
                    "409": {
                        "description": "Payer and payee cannot be the same."
                    },
                    "500": {
                        "description": "The service is temporarily down."
                    }
                }
            }
        },
        "/api/create-users": {
            "post": {
                "tags": [
                    "Create user"
                ],
                "summary": "Create a new user",
                "description": "This endpoint creates a new user.",
                "operationId": "08dd747161a7d47a112f80793ede3e0d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/user_request"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#components/schemas/user_response"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User already exists."
                    }
                }
            }
        },
        "/api/list/user/{id}": {
            "get": {
                "tags": [
                    "Get user"
                ],
                "summary": "Get user by id.",
                "description": "This endpoint get user by your id.",
                "operationId": "46d90244879d24365724ea2d09bfcf75",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User reference in the application",
                        "schema": {
                            "type": "int"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#components/schemas/user_response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "This user does not exist in the database."
                    }
                }
            }
        },
        "/api/update/user/{id}": {
            "put": {
                "tags": [
                    "Update user"
                ],
                "summary": "Update user by id.",
                "description": "This endpoint update data user by your id.",
                "operationId": "13333e17f07b99ffe22a1e22221097db",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User reference in the application",
                        "schema": {
                            "type": "int"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/user_request"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "This user does not exist in the database."
                    }
                }
            }
        },
        "/api/delete/user/{id}": {
            "delete": {
                "tags": [
                    "Delete user"
                ],
                "summary": "Delete user by id.",
                "description": "This endpoint delete user by your id.",
                "operationId": "19568ef2ae85d5cec20de107c6c6269d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User reference in the application",
                        "schema": {
                            "type": "int"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "400": {
                        "description": "This user does not exist in the database."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "user_request": {
                "properties": {
                    "name": {
                        "description": "User's full name.",
                        "type": "string",
                        "example": "Elizabeth Jhonson"
                    },
                    "email": {
                        "description": "User email must be unique.",
                        "type": "string",
                        "example": "email@email.com"
                    },
                    "password": {
                        "description": "",
                        "type": "string",
                        "example": "@!thi-$"
                    },
                    "cpf": {
                        "description": "Required if the user does not have a cnpj, this will define him as a consumer.",
                        "type": "string",
                        "example": "75360676078"
                    },
                    "cnpj": {
                        "description": "Required if the user does not have a cpf, this will define him as a seller.",
                        "type": "string",
                        "example": "40889832000125"
                    }
                },
                "type": "object"
            },
            "user_response": {
                "properties": {
                    "id": {
                        "description": "User reference.",
                        "type": "integer",
                        "example": "1"
                    },
                    "name": {
                        "description": "User's full name.",
                        "type": "string",
                        "example": "Elizabeth Jhonson"
                    },
                    "email": {
                        "description": "User email must be unique.",
                        "type": "string",
                        "example": "email@email.com"
                    },
                    "user_entity": {
                        "description": "User type.",
                        "type": "string",
                        "example": "seller"
                    },
                    "document": {
                        "description": "Details about the card brand",
                        "properties": {
                            "cpf": {
                                "type": "string",
                                "example": "75360676078"
                            },
                            "cnpj": {
                                "type": "string",
                                "example": "40889832000125"
                            }
                        },
                        "type": "object"
                    },
                    "account": {
                        "description": "Details about the card brand",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "5"
                            },
                            "account": {
                                "type": "string",
                                "example": "121622197-9"
                            },
                            "number": {
                                "type": "number",
                                "format": "float",
                                "example": "152.8"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "transaction_request": {
                "properties": {
                    "value": {
                        "description": "Value of transaction.",
                        "type": "integer",
                        "example": "100"
                    },
                    "payer": {
                        "description": "User ID",
                        "type": "integer",
                        "example": "1"
                    },
                    "payee": {
                        "description": "User ID",
                        "type": "integer",
                        "example": "2"
                    }
                },
                "type": "object"
            }
        }
    }
}